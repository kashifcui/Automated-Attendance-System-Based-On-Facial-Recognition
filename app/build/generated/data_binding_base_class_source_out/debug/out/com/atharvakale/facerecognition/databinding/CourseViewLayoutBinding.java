// Generated by view binder compiler. Do not edit!
package com.atharvakale.facerecognition.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.atharvakale.facerecognition.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class CourseViewLayoutBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView courseId;

  @NonNull
  public final TextView courseName;

  @NonNull
  public final ImageView del;

  @NonNull
  public final ImageView imageView4;

  @NonNull
  public final ImageView imageView5;

  private CourseViewLayoutBinding(@NonNull LinearLayout rootView, @NonNull TextView courseId,
      @NonNull TextView courseName, @NonNull ImageView del, @NonNull ImageView imageView4,
      @NonNull ImageView imageView5) {
    this.rootView = rootView;
    this.courseId = courseId;
    this.courseName = courseName;
    this.del = del;
    this.imageView4 = imageView4;
    this.imageView5 = imageView5;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static CourseViewLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static CourseViewLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.course_view_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static CourseViewLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.courseId;
      TextView courseId = ViewBindings.findChildViewById(rootView, id);
      if (courseId == null) {
        break missingId;
      }

      id = R.id.courseName;
      TextView courseName = ViewBindings.findChildViewById(rootView, id);
      if (courseName == null) {
        break missingId;
      }

      id = R.id.del;
      ImageView del = ViewBindings.findChildViewById(rootView, id);
      if (del == null) {
        break missingId;
      }

      id = R.id.imageView4;
      ImageView imageView4 = ViewBindings.findChildViewById(rootView, id);
      if (imageView4 == null) {
        break missingId;
      }

      id = R.id.imageView5;
      ImageView imageView5 = ViewBindings.findChildViewById(rootView, id);
      if (imageView5 == null) {
        break missingId;
      }

      return new CourseViewLayoutBinding((LinearLayout) rootView, courseId, courseName, del,
          imageView4, imageView5);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
